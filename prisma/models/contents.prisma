/**
 * One Content → belongs to one Category
 * One Content → belongs to one SubCategory
 * One Content → has one AdditionalField (optional)
 * One Category → has many SubCategories
 * One SubCategory → belongs to one Category
 */

model Content {
  id             String          @id @default(uuid())
  contentType    ContentType
  title          String
  subTitle       String
  paragraph      String?
  shortQuote     String?
  image          String?
  videoFile      String?
  imageCaption   String?
  audioFile      String?
  tags           String[]
  videoThumbnail String?

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         Status          @default(PENDING)
  isDeleted      Boolean         @default(false)

  //-------------- Relations-----------------
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  categoryId     String
  category       Category        @relation(fields: [categoryId], references: [id])

  subCategoryId  String
  subCategory    SubCategory     @relation(fields: [subCategoryId], references: [id])

  additionalFieldId String? @unique
  additionalField   AdditionalField? @relation(fields: [additionalFieldId], references: [id])

  @@map("contents")
}

model AdditionalField {
  id                  String   @id @default(uuid())
  additionalImages    String[] @default([])
  additionalAudios    String[] @default([])
  additionalQuotes    String[] @default([])
  additionalThumbnails String[] @default([])
  additionalParagraphs String[] @default([])

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // One-to-one relation
  content Content?

  @@map("additional_fields")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  isDeleted   Boolean  @default(false)

  // Relations
  subCategories SubCategory[]
  contents      Content[]

  @@map("categories")
}

model SubCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  // Relations
  contents Content[]

  @@map("sub_categories")
}

enum Status {
  PENDING
  APPROVE
}
