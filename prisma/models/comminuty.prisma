model CommunityPost {
  id          String         @id @default(uuid())
  description String
  thamble     String?
  video       String
  comments    Comment[]
  reactions   PostReaction[]
}

model ChatMessage {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  sender     User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions       CommentReaction[]
  CommunityPost   CommunityPost?    @relation(fields: [communityPostId], references: [id])
  communityPostId String?
}

model PostReaction {
  id              String       @id @default(uuid())
  type            ReactionType
  userId          String
  communityPostId String

  // --------------Relations------------
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  communitypost CommunityPost @relation(fields: [communityPostId], references: [id], onDelete: Cascade)
}

model CommentReaction {
  id        String       @id @default(uuid())
  type      ReactionType
  userId    String
  commentId String

  //--------- Relations-----------
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

enum ReactionType {
  LIKE
  DISLIKE
}
